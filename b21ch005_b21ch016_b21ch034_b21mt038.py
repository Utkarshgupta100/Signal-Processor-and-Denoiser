# -*- coding: utf-8 -*-
"""B21CH005_B21CH016_B21CH034_B21MT038.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vozJMC6nGHC66OitIWWi4FyX1ZzO2aLO
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wavfile
import pywt

fs, audio = wavfile.read('/content/ujj2_500.wav')      # This will help to load audio file
x = audio[:, 0]  # This part will help in extracting the audio signal from left channel
N = len(x)        # Determines the length of audio signal
freq = np.linspace(0, fs, N)   # It will gives the Frequency range
X = np.zeros(N, dtype=np.complex64)    # Here we are initializing the DFT array 

for k in range(N):              # This will implement the formula for the calculation of DFT
    X[k] = np.sum(x * np.exp(-2j * np.pi * k * np.arange(N) / N))

# Apply wavelet denoiser
wavelet_name = 'db4'      # Wavelet type
level = 5                # Level of decomposition
threshold_value = 0.1    # Threshold value

coeffs = pywt.wavedec(x, wavelet_name, level=level)  # Wavelet decomposition
for i in range(1, len(coeffs)):
    coeffs[i] = pywt.threshold(coeffs[i], threshold_value)  # Thresholding

denoised_signal = pywt.waverec(coeffs, wavelet_name)  # Wavelet reconstruction

# Plot original and denoised signals
plt.plot(freq, x)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.title("original signal")
plt.show()
plt.figure()
plt.subplot(2, 1, 1)
plt.plot(freq, np.abs(X))
plt.xlabel('Frequency (Hz)')
plt.ylabel('|X(f)|')
plt.title('DFT of original signal')
plt.subplot(2, 1, 2)
plt.plot(denoised_signal)
plt.xlabel('Frequency(Hz)')
plt.ylabel('Amplitude')
plt.title('Denoised Signal')
plt.tight_layout()
plt.show()